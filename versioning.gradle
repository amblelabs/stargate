// MAJOR.MINOR.PATCH-build.BUILD-DASH-SEPARATED-BRANCH+mc.MCVER (CI + custom branch)
// or
// MAJOR.MINOR.PATCH-build.BUILD+mc.MCVER (CI + main branch)
// or
// MAJOR.MINOR.PATCH-release+mc.MCVER (CI + release branch)
// or
// MAJOR.MINOR.PATCH-testbuild+mc.MCVER (no CI + no branch = local)

import java.util.Optional

class CI {

    static final String REFS_PREFIX = "refs/heads/"

    static Optional<String> branch() {
        // groovy is very bad at globals, apparently.
        return Optional.ofNullable(System.getenv("GITHUB_REF"))
                .filter { it.startsWith(REFS_PREFIX) }
                .map { it.substring(REFS_PREFIX.length()).replaceAll("/", "-") }
    }

    static Optional<String> buildNum() {
        return Optional.ofNullable(System.getenv("GITHUB_RUN_NUMBER"))
    }
}

class Versioning {

    static final String BRANCH_MAIN = "main"
    static final String BRANCH_RELEASE = "release"

    static final String BUILD_RELEASE = "release"
    static final String BUILD_LOCAL = "local"
    static final String BUILD = "dev"

    static Optional<String> getBranch() {
        return CI.branch()
                .filter { it != BRANCH_MAIN && it != BRANCH_RELEASE }
    }

    static Optional<String> getBuild() {
        return CI.branch()
                .filter { it != BRANCH_RELEASE }
                .flatMap { CI.buildNum() }
    }

    static String getQualifier() {
        return CI.branch()
                .map { it == BRANCH_RELEASE ? BUILD_RELEASE : BUILD }
                .orElse(BUILD_LOCAL)
    }
}

private String createVer(boolean includeBuild) {
    String qualifier = Versioning.qualifier

    Versioning.build.filter { includeBuild }.ifPresent {build ->
        qualifier += ".$build"
    }

    Versioning.branch.ifPresent { branch ->
        qualifier += "-$branch"
    }

    return "$project.mod_version-$qualifier+mc.$project.minecraft_version"
}

ext.getPublicVersion = {
    return createVer(true)
}

ext.getArtifactVersion = {
    return createVer(false)
}
