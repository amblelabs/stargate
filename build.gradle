plugins {
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
	id "com.diffplug.spotless" version "6.20.0"
}

apply from: 'versioning.gradle'

version = getCurrentVersion()
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		url "https://jitpack.io"

		metadataSources {
			artifact() // Look directly for artifact
		}
	}

	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}

	// For the scheduler library
	maven { url "https://theo.is-a.dev/maven-repo/" }
}

sourceSets {
	main {
		resources {
			srcDirs += [
					"src/main/generated"
			]
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	include(modImplementation("dev.drtheo:scheduler:${project.scheduler_version}")) {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation("com.github.amblelabs:modkit:v${project.amblekit_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	modCompileOnlyApi ("teamreborn:energy:${project.tech_version}")
}

processResources {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	inputs.property "version", project.version
	inputs.property "minecraft_version", project.minecraft_version
	inputs.property "loader_version", project.loader_version
	inputs.property "amblekit_version", project.amblekit_version

	filesMatching("fabric.mod.json") {
		expand "version": project.version,
				"minecraft_version": project.minecraft_version,
				"loader_version": project.loader_version,
				"amblekit_version": project.amblekit_version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {

	}
}

loom {
	// accessWidenerPath = file("src/main/resources/${project.mod_id}.accesswidener")

	runs {
		// This adds a new gradle task that runs the datagen API
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=${project.mod_id}"

			runDir "build/datagen"
		}
	}
}